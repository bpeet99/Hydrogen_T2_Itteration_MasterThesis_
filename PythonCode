!pip install CoolProp 
# Re-import necessary modules after code environment reset
import numpy as np
import pandas as pd
from scipy.optimize import root_scalar
from scipy.integrate import quad
from CoolProp.CoolProp import PropsSI

# Constants
T1 = 269.45  # K
P1 = 272e5   # Pa
P2 = 245e5   # Pa
M = 0.002016 # kg/mol
a_molar = 0.02453# Pa*m**6/mol**2
a_mass = a_molar / (M**2) 

# Get v1 from CoolProp using T1, P1
rho1 = PropsSI('D', 'T', T1, 'P', P1, 'Hydrogen')  # Density at T1, P1
v1 = 1 / rho1

# Define Î”u function that depends on T2
def delta_u(T2):
    try:
        # Thermal contribution: âˆ« c_v(T) dT from T1 to T2
        thermal_term, _ = quad(lambda T: PropsSI('CVMASS', 'T', T, 'P', P2, 'Hydrogen'), T1, T2)
        
        # Get v2 from CoolProp at trial T2 and P2
        rho2 = PropsSI('D', 'T', T2, 'P', P2, 'Hydrogen')
        v2 = 1 / rho2
        
        # Van der Waals correction
        correction_term = a_mass * (1/v1 - 1/v2)
        
        return thermal_term + correction_term
    except:
        return 1e10  # return a large number on failure

# Sweep a range of T2 values to generate a table
T2_range = np.arange(T1 - 10, T1 + 0.1, 0.2)
table = []

for T2 in T2_range:
    try:
        thermal_term, _ = quad(lambda T: PropsSI('CVMASS', 'T', T, 'P', P2, 'Hydrogen'), T1, T2)
        rho2 = PropsSI('D', 'T', T2, 'P', P2, 'Hydrogen')
        v2 = 1 / rho2
        correction_term = a_mass * (1/v1 - 1/v2)
        deltaU = thermal_term + correction_term
        table.append({
            "T2 [K]": T2,
            "T2 [Â°C]": T2 - 273.15,
            "v2 [mÂ³/kg]": v2,
            "Î”u [J/kg]": deltaU
        })
    except:
        continue

# Now find the root using a numerical method
sol = root_scalar(delta_u, bracket=[T1 - 10, T1], method='brentq')
T2_root = sol.root

# Recalculate final properties
thermal_term_root, _ = quad(lambda T: PropsSI('CVMASS', 'T', T, 'P', P2, 'Hydrogen'), T1, T2_root)
rho2_root = PropsSI('D', 'T', T2_root, 'P', P2, 'Hydrogen')
v2_root = 1 / rho2_root
correction_root = a_mass * (1/v1 - 1/v2_root)
deltaU_root = thermal_term_root + correction_root

# Add root to the table
table.append({
    "T2 [K]": T2_root,
    "T2 [Â°C]": T2_root - 273.15,
    "v2 [mÂ³/kg]": v2_root,
    "Î”u [J/kg]": deltaU_root
})



# Show the iteration table using Pandas
print("\nðŸ“Š T2 Iteration Table:")
print(df_sorted.to_string(index=False))

# Final result
print(f"\nâœ… Final T2 (Î”u â‰ˆ 0): {T2_root:.4f} K = {T2_root - 273.15:.2f} Â°C")
print(f"Î”u = {deltaU_root:.2f} J/kg")
print(f"v1 = {v1:.6e} mÂ³/kg")
print(f"v2 = {v2_root:.6e} mÂ³/kg")
